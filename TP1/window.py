# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '../../../../window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from search import search as sh
from search import scalar_product, cosine, jaccard, evaluate_expression


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        # Dialog.resize(640, 480)
        Dialog.resize(885, 532)
        self.scrollArea = QtWidgets.QScrollArea(Dialog)
        self.scrollArea.setGeometry(QtCore.QRect(40, 170, 571, 291))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 569, 289))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.textBrowser = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents)
        self.textBrowser.setGeometry(QtCore.QRect(0, 0, 581, 290))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setFont(font)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(110, 30, 421, 31))
        self.lineEdit.setObjectName("lineEdit")
        self.queryLabel = QtWidgets.QLabel(Dialog)
        self.queryLabel.setGeometry(QtCore.QRect(30, 30, 71, 31))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.queryLabel.setFont(font)
        self.queryLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.queryLabel.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(Dialog)
        # connect the button to the slot
        self.pushButton.clicked.connect(self.fire_search)

        self.pushButton.setGeometry(QtCore.QRect(540, 30, 80, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.groupBox = QtWidgets.QGroupBox(Dialog)
        self.groupBox.setGeometry(QtCore.QRect(40, 80, 271, 81))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.groupBox.setFont(font)
        self.groupBox.setToolTip("")
        self.groupBox.setObjectName("groupBox")
        self.tokenCheckBox = QtWidgets.QCheckBox(self.groupBox)
        self.tokenCheckBox.setGeometry(QtCore.QRect(20, 40, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.tokenCheckBox.setFont(font)
        self.tokenCheckBox.setObjectName("checkBox")
        self.porterCheckBox = QtWidgets.QCheckBox(self.groupBox)
        self.porterCheckBox.setGeometry(QtCore.QRect(140, 40, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.porterCheckBox.setFont(font)
        self.porterCheckBox.setObjectName("checkBox_2")
        self.groupBox_2 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_2.setGeometry(QtCore.QRect(340, 80, 271, 81))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setToolTip("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.doc_term_RadioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.doc_term_RadioButton.setGeometry(QtCore.QRect(10, 40, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.doc_term_RadioButton.setFont(font)
        self.doc_term_RadioButton.setObjectName("radioButton")
        self.term_doc_RadioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.term_doc_RadioButton.setGeometry(QtCore.QRect(140, 40, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.term_doc_RadioButton.setFont(font)
        self.term_doc_RadioButton.setObjectName("radioButton_2")
        font = QtGui.QFont()
        font.setPointSize(10)
        self.term_doc_RadioButton.setFont(font)
        self.term_doc_RadioButton.setObjectName("term_doc_RadioButton")
        self.groupBox_3 = QtWidgets.QGroupBox(Dialog)
        self.groupBox_3.setGeometry(QtCore.QRect(620, 80, 251, 301))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.groupBox_3.setFont(font)
        self.groupBox_3.setToolTip("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.VSM = QtWidgets.QRadioButton(self.groupBox_3)
        self.VSM.setGeometry(QtCore.QRect(10, 40, 181, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.VSM.setFont(font)
        self.VSM.setObjectName("VSM")
        self.VSM.toggled.connect(self.update_index)
        self.vector_method = QtWidgets.QComboBox(self.groupBox_3)
        self.vector_method.setGeometry(QtCore.QRect(20, 80, 131, 23))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.vector_method.setFont(font)
        self.vector_method.setObjectName("vector_method")
        self.vector_method.addItem("")
        self.vector_method.addItem("")
        self.vector_method.addItem("")
        self.BSM = QtWidgets.QRadioButton(self.groupBox_3)
        self.BSM.setGeometry(QtCore.QRect(10, 120, 181, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.BSM.setFont(font)
        self.BSM.setObjectName("BSM")
        self.k_input = QtWidgets.QLineEdit(self.groupBox_3)
        self.k_input.setGeometry(QtCore.QRect(40, 150, 41, 31))
        self.k_input.setObjectName("k_input")
        self.label_2 = QtWidgets.QLabel(self.groupBox_3)
        self.label_2.setGeometry(QtCore.QRect(20, 150, 16, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox_3)
        self.label_3.setGeometry(QtCore.QRect(110, 150, 16, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label_3.setObjectName("label_3")
        self.B_input = QtWidgets.QLineEdit(self.groupBox_3)
        self.B_input.setGeometry(QtCore.QRect(130, 150, 41, 31))
        self.B_input.setText("")
        self.B_input.setObjectName("B_input")
        self.bm_model = QtWidgets.QRadioButton(self.groupBox_3)
        self.bm_model.setGeometry(QtCore.QRect(10, 200, 121, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bm_model.setFont(font)
        self.bm_model.setObjectName("bm_model")
        self.dm_model = QtWidgets.QRadioButton(self.groupBox_3)
        self.dm_model.setGeometry(QtCore.QRect(10, 220, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.dm_model.setFont(font)
        self.dm_model.setObjectName("dm_model")
        self.query_dataset = QtWidgets.QCheckBox(Dialog)
        self.query_dataset.setGeometry(QtCore.QRect(660, 30, 131, 21))
        font = QtGui.QFont()
        self.query_dataset = QtWidgets.QCheckBox(Dialog)
        self.query_dataset.setGeometry(QtCore.QRect(660, 30, 131, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.query_dataset.setFont(font)
        self.query_dataset.setObjectName("query_dataset")
        self.spinBox = QtWidgets.QSpinBox(Dialog)
        self.spinBox.setGeometry(QtCore.QRect(820, 30, 43, 24))
        self.spinBox.setObjectName("spinBox")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.queryLabel.setText(_translate("Dialog", "Query"))
        self.pushButton.setText(_translate("Dialog", "Search"))
        self.groupBox.setTitle(_translate("Dialog", "processing"))
        self.tokenCheckBox.setText(_translate("Dialog", "Tokenization"))
        self.porterCheckBox.setText(_translate("Dialog", "Porter Stemmer"))
        self.groupBox_2.setTitle(_translate("Dialog", "Index"))
        self.doc_term_RadioButton.setText(_translate("Dialog", "docs per TERM"))
        self.term_doc_RadioButton.setText(_translate("Dialog", "TERMS per doc"))
        self.term_doc_RadioButton.setChecked(True)
        self.groupBox_3.setTitle(_translate("Dialog", "Matching"))
        self.VSM.setText(_translate("Dialog", "Vector Space Model"))
        self.vector_method.setItemText(0, _translate("Dialog", "Scalar Product"))
        self.vector_method.setItemText(1, _translate("Dialog", "Cosine"))
        self.vector_method.setItemText(2, _translate("Dialog", "Jaccard"))
        self.vector_method.setEnabled(False)
        self.BSM.setText(_translate("Dialog", "probabilistic model"))
        self.label_2.setText(_translate("Dialog", "K"))
        self.label_3.setText(_translate("Dialog", "B"))
        self.bm_model.setText(_translate("Dialog", "boolean model"))
        self.dm_model.setText(_translate("Dialog", "data mining model"))
        self.query_dataset.setText(_translate("Dialog", "Queries dataset"))
        if self.VSM.isChecked():
            print("hello")
            self.vector_method.setEnabled(True)
            self.term_doc_RadioButton.setEnabled(False)

    def update_index(self):
        if self.VSM.isChecked():
            self.vector_method.setEnabled(True)
            self.term_doc_RadioButton.setEnabled(False)
            self.doc_term_RadioButton.setEnabled(False)
            # self.B_input.setEnabled(False)
        else:
            self.vector_method.setEnabled(False)
            self.doc_term_RadioButton.setEnabled(True)
            self.term_doc_RadioButton.setEnabled(True)

    def searchQuery_b(self):
        expression = self.lineEdit.text()
        split = 0
        if self.tokenCheckBox.isChecked():
            split = 1
        processing = 0
        if self.porterCheckBox.isChecked():
            processing = 1
        res = evaluate_expression(expression, split=split, processing=processing)
        self.print_text(res, ["No    ", "Relevance    "])

    def fire_search(self):
        if self.bm_model.isChecked():
            self.searchQuery_b()
        elif self.VSM.isChecked():
            self.searchQuery()

    def searchQuery(self):
        # slot
        query = self.lineEdit.text().split(" ")
        # remove empty strings
        query = list(filter(None, query))
        query = self.process_query(query)
        # get the parameters
        split = 0
        if self.tokenCheckBox.isChecked():
            split = 1
        VSM = self.VSM.isChecked()
        title = []
        processing = 0
        if self.porterCheckBox.isChecked():
            processing = 1
        if not VSM:
            doc_term = self.doc_term_RadioButton.isChecked()
            print(doc_term)
            if not doc_term:
                title = [
                    "No    ",
                    "Terme       ",
                    "NumDoc    ",
                    "Freq       ",
                    "Poids    ",
                ]
                try:
                    result = sh(query, split=split, processing=processing, doc=1)
                except:
                    self.textBrowser.clear()
                    self.textBrowser.append("Please enter a valid term")
                    return
            else:
                try:
                    title = [
                        "No    ",
                        "NumDoc    ",
                        "term      ",
                        "Freq       ",
                        "Poids    ",
                    ]
                    result = sh(int(query), split=split, processing=processing, doc=0)
                except:
                    self.textBrowser.clear()
                    self.textBrowser.append("Please enter a valid number")
                    return
        else:
            prod_method = self.vector_method.currentText()
            title = ["No    ", "Relevance    "]
            if prod_method == "Scalar Product":
                result = scalar_product(query, split=split, processing=processing)
            elif prod_method == "Cosine":
                result = cosine(query, split=split, processing=processing)
            else:
                result = jaccard(query, split=split, processing=processing)

        self.print_text(result, title)

        # align every column
        # set the scroll to the top
        self.textBrowser.verticalScrollBar().setValue(
            self.textBrowser.verticalScrollBar().minimum()
        )

    def process_query(self, query):
        # if the query list contains only one element, then it's whether a string or a number we must call the sh function
        if len(query) == 1:
            try:
                query = int(query[0])
            except:
                query = query[0]
        return query

    def print_text(self, text, title):
        self.textBrowser.clear()
        self.textBrowser.append(" ".join(title))
        for line in text:
            if isinstance(line, list):
                line.insert(0, str(text.index(line)))
                # add spaces to every element depending on the biggest element
                for i in range(len(line)):
                    line[i] = line[i].ljust(len(title[i]) + 5)
                # get only the first 3 numbers in the float
                line[-1] = line[-1][:5]
                # add a counter value in the first element and push the rest
                self.textBrowser.append(" ".join(line))
            else:
                self.textBrowser.append(str(line) + "       " + str(text[line]))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_Dialog()

    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
